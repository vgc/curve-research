import numpy as np
import scipy as sp
import plotly.express as plx
import plotly.graph_objects as plgo
import pandas as pd
import math

rawPoints1 = [(84, 361), (115, 330), (118, 327), (121, 324), (124, 320), (142, 301), (146, 296), (150, 291), (175, 260), (179, 255), (183, 250), (188, 245), (209, 219), (212, 215), (216, 210), (220, 205), (241, 182), (244, 178), (247, 175), (262, 160), (264, 158), (265, 157), (272, 149), (273, 148), (274, 148), (274, 147)]
rawPointsTimestamps1 = [5627, 5688, 5688, 5690, 5692, 5704, 5705, 5706, 5719, 5722, 5723, 5724, 5735, 5736, 5738, 5740, 5752, 5755, 5755, 5768, 5770, 5772, 5785, 5786, 5788, 5790]
rawPoints2 = [(281, 149), (282, 150), (283, 151), (284, 152), (285, 153), (286, 154), (287, 156), (289, 158), (299, 173), (302, 177), (305, 181), (321, 208), (324, 214), (327, 219), (330, 224), (346, 260), (349, 267), (352, 274), (354, 280), (368, 318), (370, 325)]
rawPointsTimestamps2 = [7746, 7762, 7764, 7766, 7768, 7771, 7771, 7774, 7785, 7786, 7788, 7801, 7802, 7804, 7806, 7818, 7821, 7822, 7823, 7837, 7839]
matrix12 = [0.30574617949871175, 0, 0, -154.88379536034668, 0, 0.30574617949871175, 0, -100.72042261863672, 0, 0, 1, 0, 0, 0, 0, 1]

rawPoints3 = [(88, 315), (89, 315), (90, 316), (91, 316), (94, 318), (95, 318), (96, 318), (100, 320), (101, 320), (102, 320), (103, 321), (111, 323), (112, 323), (113, 324), (115, 324), (122, 326), (123, 326), (125, 326), (134, 328), (135, 329), (137, 329), (138, 329), (140, 329), (141, 330), (147, 331), (149, 331), (150, 332), (159, 334), (160, 334), (162, 334), (169, 336), (171, 337), (172, 337), (173, 337), (179, 339), (180, 339), (181, 340), (182, 340), (189, 343), (190, 343), (191, 343), (198, 346), (200, 347), (201, 347), (202, 348), (207, 350), (208, 350), (210, 351), (211, 351), (217, 354), (218, 355), (219, 355), (225, 358), (226, 359), (227, 359), (228, 360), (232, 362), (233, 363), (234, 363), (235, 364), (240, 367), (241, 367), (242, 368), (242, 369), (247, 371), (247, 372), (248, 372), (249, 373), (252, 375), (255, 378), (256, 379), (258, 381), (259, 381), (259, 382), (261, 385), (262, 385), (262, 386), (263, 386), (265, 389), (265, 390), (265, 391), (268, 394), (268, 395), (269, 396), (271, 400), (272, 400), (272, 401), (275, 405), (275, 406), (276, 406), (276, 407), (278, 409), (279, 410), (279, 411), (282, 414), (283, 414), (283, 415), (284, 416), (288, 420), (289, 421), (290, 421), (295, 425), (295, 426), (296, 426), (297, 427), (298, 427), (300, 429), (301, 430), (302, 430), (302, 431), (305, 432), (306, 433), (309, 435), (310, 435), (311, 435), (313, 437), (314, 437), (314, 438), (317, 439), (317, 440), (318, 440), (319, 440), (322, 442), (322, 443), (323, 443), (326, 445), (327, 445), (328, 446), (331, 448), (332, 448), (333, 448), (336, 450), (337, 450), (339, 451), (340, 452), (341, 452), (343, 453), (344, 454), (346, 455), (347, 455), (348, 455), (350, 457), (351, 457), (354, 459), (355, 459), (356, 459), (358, 460), (359, 461), (362, 462), (363, 462), (365, 463), (365, 464), (366, 464), (367, 464), (368, 465), (369, 465), (370, 465), (370, 466), (371, 466), (371, 467), (373, 467), (373, 468), (374, 468), (376, 469), (376, 470), (378, 471), (379, 471), (381, 472), (382, 472), (382, 473), (384, 473), (385, 474), (386, 474), (387, 475), (388, 475), (390, 476), (390, 477), (391, 477), (393, 478), (394, 478), (394, 479), (395, 479), (397, 480), (398, 480), (398, 481), (400, 481), (401, 481), (401, 482), (402, 482), (404, 483), (405, 483), (408, 484), (409, 484), (412, 485), (413, 485), (415, 486), (416, 486), (417, 486)]
rawPointsTimestamps3 = [1759112, 1759165, 1759180, 1759183, 1759198, 1759201, 1759203, 1759215, 1759217, 1759218, 1759221, 1759233, 1759236, 1759238, 1759239, 1759248, 1759251, 1759252, 1759267, 1759268, 1759270, 1759270, 1759272, 1759275, 1759284, 1759285, 1759287, 1759300, 1759301, 1759302, 1759315, 1759317, 1759319, 1759321, 1759332, 1759333, 1759335, 1759337, 1759349, 1759351, 1759353, 1759365, 1759366, 1759368, 1759371, 1759382, 1759382, 1759385, 1759387, 1759399, 1759401, 1759403, 1759415, 1759416, 1759418, 1759421, 1759432, 1759433, 1759435, 1759437, 1759450, 1759452, 1759453, 1759454, 1759470, 1759471, 1759473, 1759473, 1759487, 1759499, 1759503, 1759516, 1759518, 1759519, 1759532, 1759533, 1759535, 1759538, 1759548, 1759551, 1759553, 1759565, 1759566, 1759568, 1759582, 1759583, 1759585, 1759599, 1759601, 1759602, 1759605, 1759616, 1759616, 1759621, 1759632, 1759633, 1759635, 1759637, 1759649, 1759651, 1759653, 1759665, 1759667, 1759669, 1759670, 1759672, 1759682, 1759683, 1759685, 1759689, 1759699, 1759701, 1759715, 1759716, 1759721, 1759732, 1759735, 1759737, 1759749, 1759751, 1759752, 1759754, 1759765, 1759768, 1759771, 1759782, 1759782, 1759787, 1759799, 1759801, 1759802, 1759815, 1759818, 1759832, 1759833, 1759837, 1759848, 1759853, 1759865, 1759868, 1759872, 1759884, 1759885, 1759899, 1759901, 1759905, 1759915, 1759917, 1759932, 1759936, 1759948, 1759951, 1759953, 1759965, 1759971, 1759983, 1759998, 1760001, 1760016, 1760019, 1760032, 1760033, 1760037, 1760049, 1760054, 1760065, 1760067, 1760082, 1760086, 1760088, 1760099, 1760115, 1760117, 1760132, 1760135, 1760148, 1760151, 1760153, 1760165, 1760167, 1760168, 1760171, 1760182, 1760184, 1760187, 1760198, 1760199, 1760201, 1760205, 1760215, 1760218, 1760232, 1760237, 1760249, 1760253, 1760265, 1760282, 1760299]
matrix3 = [0.20088955491023208, 0, 0, -129.0890657115807, 0, 0.20088955491023208, 0, -60.24576552748356, 0, 0, 1, 0, 0, 0, 0, 1]

def wsum(f, r):
    return np.sum(np.multiply(f(r[0]), r[1]))

def make_lg_integrator(n):
    r = np.polynomial.legendre.leggauss(n)
    def wsum_lgn(f, a, b):
        c = 0.5 * (a + b)
        l = (b - a)
        d = 0.5 * l
        def f2(x):
            t = c + d * x
            #print(f"x: {x}")
            #print(f"t: {t}")
            return f(t)
        return wsum(f2, r) * l / 2
    return wsum_lgn


def douglas_peucker_variant_on_interval(indices, depths, points, i, tc=1):
    endIndex = indices[i + 1]
    index = i
    while indices[index] != endIndex:
        i0 = indices[index]
        i1 = indices[index+1]
        print(f"interval: {i0} {i1}")

        a = points[i0]
        b = points[i1]
        ab = (b[0] - a[0], b[1] - a[1])
        lab = math.sqrt(ab[0] * ab[0] + ab[1] * ab[1])

        ab_ = (abs(ab[0]), abs(ab[1]))
        r = math.acos((ab_[0] if ab_[0] > ab_[1] else ab_[1]) / lab)
        pixelHalfwidthOnOrthogonalOfAB = math.cos(math.pi / 4 - r) * math.sqrt(2) / 2
        threshold = tc * pixelHalfwidthOnOrthogonalOfAB
        print(f"a: {a}, b: {b}")
        print(f"threshold: {threshold}")

        maxDist = 0
        farthestPointSide = 0
        farthestPointIndex = -1
        for k, q in enumerate(points[i0+1:i1]):
            d = (q[0] - a[0], q[1] - a[1])
            dist = (ab[0] * d[1] - ab[1] * d[0]) / lab
            side = dist >= 0
            dist = abs(dist)
            #print(f"dist: {dist}")
            if (dist > maxDist):
                maxDist = dist
                farthestPointIndex = i0+1+k
                farthestPointSide = side

        if maxDist >= threshold:
            indices.insert(index+1, farthestPointIndex)
            depths.insert(index+1, max(depths[index], depths[index+1]) + 1)

            nx = -ab[1] / lab
            ny = ab[0] / lab
            if farthestPointSide:
                nx = -nx
                ny = -ny
            p = points[farthestPointIndex]
            c = 0.5 # previous version
            #c = threshold * 0.5
            c = pixelHalfwidthOnOrthogonalOfAB * 0.0
            print(f"c: {c}")
            #c = 0.55
            points[farthestPointIndex] = (p[0] + nx * c, p[1] + ny * c)
        else:
            index += 1
    return index

def plot_raw():
    #grid = np.ndarray(shape=(resolution, resolution), dtype=float)
    #p0 = np.array((-1, 0))
    #p2 = np.array(( 1, 0))
    #fig = plx.scatter(rawPoints3)

    rawPoints =  [(44, 125), (45, 124), (46, 124), (46, 123), (47, 123), (47, 122), (49, 121), (50, 121), (50, 120), (51, 120), (54, 118), (55, 118), (56, 118), (60, 116), (60, 115), (61, 115), (62, 115), (63, 114), (68, 113), (69, 113), (70, 113), (72, 113), (79, 112), (81, 112), (83, 112), (85, 112), (87, 112), (98, 112), (100, 112), (102, 113), (105, 113), (115, 115), (118, 115), (120, 116), (122, 116), (124, 117), (134, 121), (135, 121), (137, 122), (144, 128), (145, 129), (146, 130), (147, 131), (150, 137), (151, 138), (151, 139), (152, 141), (153, 147), (153, 148), (153, 150), (153, 151), (153, 152), (152, 159), (151, 160), (151, 162), (148, 170), (148, 172), (147, 174), (146, 175), (146, 177), (145, 179), (141, 187), (140, 189), (139, 191), (138, 193), (132, 204), (131, 206), (129, 208), (128, 210), (122, 221), (121, 223), (119, 225), (118, 227), (113, 237), (111, 239), (110, 240), (109, 242), (108, 244), (107, 246), (104, 252), (103, 254), (102, 255), (102, 256), (99, 263), (99, 264), (98, 265), (98, 266), (97, 270), (97, 271), (97, 272), (97, 273), (97, 278), (98, 278), (98, 279), (99, 281), (103, 287), (104, 288), (105, 289), (107, 291), (115, 298), (117, 299), (119, 300), (121, 302), (123, 303), (134, 309), (136, 310), (139, 311), (142, 312), (154, 317), (156, 318), (159, 319), (161, 320), (163, 321), (166, 322), (175, 325), (177, 326), (180, 326), (182, 327), (192, 332), (193, 333), (194, 334), (195, 335), (198, 338), (199, 339), (199, 340), (199, 341), (200, 348), (200, 349), (200, 351), (200, 352), (200, 354), (200, 364), (200, 366), (200, 368), (200, 370), (200, 372), (200, 381), (200, 383), (200, 385), (200, 388), (200, 390), (200, 401), (200, 403), (200, 404), (200, 406), (200, 415), (200, 417), (200, 418), (201, 420), (202, 427), (202, 428), (203, 430), (203, 431), (206, 437), (207, 439), (207, 440), (208, 441), (209, 443), (213, 449), (215, 450), (216, 451), (217, 452), (223, 458), (224, 460), (225, 461), (227, 462), (228, 463), (234, 467), (235, 468), (236, 469), (238, 469), (239, 470), (243, 472), (245, 472), (246, 473), (247, 473), (248, 473), (254, 474), (255, 474), (256, 474), (257, 474), (258, 474), (264, 474), (265, 474), (266, 474), (270, 473)]

    #rawPoints = rawPoints3

    points = np.array(rawPoints).transpose()

    fig = plgo.Figure()
    fig.add_trace(plgo.Scatter(x=points[0], y=points[1], mode='markers'))

    # intentionally excluded if exactly 3 pixels apart
    threshold = 5.1

    pendingPoint = None
    filtered = [rawPoints[0]]
    for p in rawPoints[1:]:
        d = (p[0] - filtered[-1][0], p[1] - filtered[-1][1])
        if (d[0] * d[0] + d[1] * d[1]) > threshold * threshold:
            pendingPoint = None
            filtered.append(p)
        else:
            if pendingPoint is not None:
                e = (p[0] - pendingPoint[0], p[1] - pendingPoint[1])
                if (d[0] * e[0] + d[1] * e[1]) < 0:
                    filtered[-1] = pendingPoint
            pendingPoint = p
    if pendingPoint is not None:
        filtered[-1] = pendingPoint

    result = np.array(filtered).transpose()
    #fig.add_trace(plgo.Scatter(x=result[0], y=result[1], mode='lines+markers'))

    # Douglas-Peucker
    newPoints = rawPoints.copy()
    filteredIndices = [0, len(newPoints)-1]
    depths = [0, 0]
    douglas_peucker_variant_on_interval(filteredIndices, depths, newPoints, 0, 2.01)
    dpResult = np.array([newPoints[i] for i in filteredIndices]).transpose()
    dpcResult = [str(d) for d in depths]
    fig.add_trace(plgo.Scatter(x=dpResult[0], y=dpResult[1], text=dpcResult, mode='lines+markers+text'))
    fig.update_traces(textposition="bottom right")

    # Douglas-Peucker iterative test
    newPoints = rawPoints.copy()
    filteredIndices = [0, 0]
    depths = [0, 0]
    for i in range(1, len(rawPoints)):
        filteredIndices[-1] = i
        i0 = len(filteredIndices) - 2
        i1 = douglas_peucker_variant_on_interval(filteredIndices, depths, newPoints, i0, 2.01)
        # it should have added at most one index
        assert(i1 - i0 <= 2)
        if i1 == i0 + 2:
            douglas_peucker_variant_on_interval(filteredIndices, depths, newPoints, i0, 1.01)
    i0 = len(filteredIndices) - 2
    douglas_peucker_variant_on_interval(filteredIndices, depths, newPoints, i0, 1)

    dpResult2 = np.array([newPoints[i] for i in filteredIndices]).transpose()
    fig.add_trace(plgo.Scatter(x=dpResult2[0], y=dpResult2[1], mode='lines+markers'))

    fig.update_yaxes(
        scaleanchor = "x",
        scaleratio = 1,
    )
    fig.show()

plot_raw()


